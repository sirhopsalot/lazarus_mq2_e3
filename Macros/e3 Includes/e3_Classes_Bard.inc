|----------------------------------------------------------------------------|
| Bard Functions
|----------------------------------------------------------------------------|
#event saveMelody "<#1#> Save Melody #2# #3#"
#event saveMelody "[MQ2] Save Melody #2# #3#"
SUB EVENT_saveMelody(line, ChatSender, melodyName, songsToSave)
/if (${Debug}) /echo |- EVENT_saveMelody ==>
	| If no ChatSender is defined, make one.
	/if (!${Defined[ChatSender]}) /declare ChatSender string local ${Me.CleanName}
	| If I'm the ChatSender.
	/if (${ChatSender.Equal[${Me.CleanName}]}) {
		/declare i int local
		| Check if the melody already exists, and should not be overwritten.
		/if (${Ini[${Character_Ini},${melodyName} Melody].Length}) {	
			/if (${Debug}) /echo |- EVENT_saveMelody -| Overwriting [${melodyName}] melody...
			/for i 1 to 8 + ${Me.SPA[326]}
				/if (${Ini[${Character_Ini},${melodyName} Melody,Song].Length}) /call WriteToIni "${Character_Ini},${melodyName} Melody,Song#${i}" *PLACEHOLDER 1
			/next i
		}
		/echo Saving [${melodyName}] melody...
		/varset i 1
		:check_nextSong

		| If the gem number is not recognized
		/if (!${Int[${songsToSave.Arg[${i}, ]}]} || ${Int[${songsToSave.Arg[${i}, ]}]} < 1 || ${Int[${songsToSave.Arg[${i}, ]}]} > 9) {
			/if (${songsToSave.Arg[${i}, ].NotEqual[-Overwrite]}) {
				/echo [${songsToSave.Arg[${i}, ]}] is not a valid gem number.  Please use the following syntax when saving melodies, "Save Melody [NAME] [# # # # #] (-Overwrite)".  Ex.  /echo Save Melody Raid 1 2 3 4 5 6 7 -Overwrite
			}
		} else {
			/echo Song#${i}=${Me.Gem[${songsToSave.Arg[${i}, ]}]}/gem|${songsToSave.Arg[${i}, ]}
			/call WriteToIni "${Character_Ini},${melodyName} Melody,Song" "${Me.Gem[${songsToSave.Arg[${i}, ]}]}/gem|${songsToSave.Arg[${i}, ]}" ${If[${Ini[${Character_Ini},${melodyName} Melody,Song].Length},1,0]}
		}
		/varcalc i ${i} + 1
		/if (${songsToSave.Arg[${i}, ].Length}) /goto :check_nextSong
	}
/if (${Debug}) /echo <== EVENT_saveMelody -|
/return
|------------------------------------------------------------------------|
#EVENT startMelody "<#1#> Melody #2#"
#EVENT startMelody "[#1#] Melody #2#"
#EVENT startMelody "#1# tells you, 'Melody #2#'"
SUB EVENT_startMelody(line, ChatSender, melodyName)
/if (${Debug}) /echo |- EVENT_startMelody ==>
  /if (${Me.Class.ShortName.Equal[BRD]}) {
    /if (!${checkEventArgs[${ChatSender},${line},UZR,${melodyName}]}) /return
    /varset currentMelody ${melodyName}
    /declare memGem int local
    /varset melodyName ${c_eventArgData}
    | If I don't have the melodyName listed in my ini.
    /call IniToArrayV "${Character_Ini},${melodyName} Melody,Song#" melodyArray
    /if (!${Defined[melodyArray]}) {
      | If Stop, end, or pause were used, stop the melody.
      /if (${Select[${melodyName},Stop,End,Pause]}) {
        /varset playingMelody FALSE
        /varset songSet
        /docommand ${ChatToggle} Ending melody.
        /twist end
        /varset fixedMelody ${melodyName}
      } else {
        /docommand ${ChatToggle} [${melodyName}] is not a known melody.
      }
    } else {
      /declare songList string local
      /declare spellName string local
      /declare i int local
      | For 1 to 7 (maximum melody size to include selos, 6 songs played actively with some droppage)
      /for i 1 to ${melodyArray.Size}
      |/echo ${i} ${melodyArray[${i}]}
      /if (${melodyArray[${i}].Length} && ${melodyArray[${i}].NotEqual[PLACEHOLDER]}) {
        /varset spellName ${melodyArray[${i}].Arg[1,/]}
        | Check that the song is in my book or the item is in my inventory
        /if (!${Me.Book[${spellName}]} && !${Bool[${FindItem[=${spellName}]}]}) {
          /echo I don't have [${spellName}] in my spellbook and I don't have an item named [${spellName}], playing the melody without it.
        } else /if (${Bool[${FindItem[=${spellName}]}]}) {
          /call argueString gem| "${melodyArray[${i}]}"
          /echo Found item for twist ${spellName}, will use item slot ${c_argueString}
          /varset songList ${songList} ${c_argueString}
        } else {
          | If the song is not memmed, use mq2Cast to mem
          /if (!${Me.Gem[${spellName}]}) {
            /call argueString gem| "${melodyArray[${i}]}"
            /if (${Bool[${c_argueString}]}) {
              /varset memGem ${c_argueString}
            } else {
              /varset memGem ${DefaultGem}
            }
            /memorize "${spellName}" "${memGem}"
            /if (${Cast.Status.Find[M]}) /delay 3s !${Cast.Status.Find[M]}
          } 
          | Update songList with the corresponding gem#
          /varset songList ${songList} ${Me.Gem[${spellName}]}
        }
        /next i
      }
      | If I have a songList, start singing the melody
      /if (${Bool[${songList}]}) {
        | Twist the newly built songList.
        /varset playingMelody TRUE
        /varset returnTwist FALSE
        /varset songSet ${songList}
        /docommand ${ChatToggle} Playing [${melodyName}].
        /if (${fixedMelody.Equal[stop]}) {
          /varset fixedMelody off
        }
        /if (${songPlayer.NotEqual["Dynamo"]}) /twist ${songSet}
      }
    }
  }
/if (${Debug}) /echo <== EVENT_startMelody -|
/return
|--------------------------------------------------------------|
SUB pauseTwist
/if (${Debug} || ${Debug_Casting}) /echo |- pauseTwist ==>
	/varset	returnTwist TRUE
	/squelch /twist stop
	/delay 2s !${Me.Casting.ID}
/if (${Debug} || ${Debug_Casting}) /echo <== pauseTwist -|
/return
|--------------------------------------------------------------|
SUB unpauseTwist
	/delay 2 !${Me.Casting.ID}
	/varset 	returnTwist FALSE
	/if (${songPlayer.NotEqual["Dynamo"]}) /squelch 	/twist ${songSet}
	/delay 2 ${Me.Casting.ID}
/return
|--------------------------------------------------------------|
#event toggleMez "<#1#> Mez #2#"
#event toggleMez "#1# tells you, 'Mez #2#'"
sub event_toggleMez(line, ChatSender, mezToggle)
  /if (${Me.Class.ShortName.Equal[ENC]} || ${Me.Class.ShortName.Equal[BRD]}) {
    /if (${Debug} || ${Debug_Ench}) /echo |- remove_RuneTarget ==>
      /if (${mezToggle.Equal[on]}) {
        /varset autoMez TRUE
        /varset fixedMelody ${currentMelody}
        /docommand ${ChatToggle} << Mezzing Enabled >>
      } else {
        /varset autoMez FALSE
        /varset fixedMelody off
        /docommand ${ChatToggle} << Mezzing Disabled >>
    }
    /if (${Debug}) /echo <== remove_RuneTarget -|
  }
/return
|--------------------------------------------------------------|
Sub check_bard_charm
/if (${Debug} || ${Debug_Ench}) /echo |- check_Charm ==>
/if (${Defined[charmArray2D]}) {
  /declare s int local
  /declare charmDuration int local
  /if (${doCharm} && ${Bool[${charmTarget}]}) {
    /if (${SpawnCount[npc id ${charmTarget}]}==0 && ${charmTarget}!=${Me.Pet.ID}) {
      /docommand ${ChatToggle} Disabling Charm: ${charmTarget} is no longer a valid npc
      /varset doCharm FALSE
      /varset charmTarget 0
      /return
    }
    /if (${Me.Pet.Race.Name.Equal[Invisible Man]}) {
      /pet get lost
      /delay 1s !${Me.Pet.ID}
    }
    /if (!${Bool[${Me.Pet.ID}]}) {
      /bc [+r+] << ${Spawn[id ${charmTarget}].CleanName} is not Charmed! >> [+r+]
      /for s 1 to ${charmArray2D.Size[1]}
      /call check_Ready "charmArray2D" ${s}
      /if (${c_Ready}) {
        /if (${check_Mana["charmArray2D",${s}]}) {
          /if (${check_Distance[${charmTarget} ${charmArray2D[${s},${iMyRange}]}]}) {
            /docommand ${ChatToggle} << Charming ${charmTarget} ${Spawn[id ${charmTarget}].CleanName} with ${charmArray2D[${s},${iCastName}]} >>
            /call e3_Cast ${charmTarget} "charmArray2D" "${s}"
            /if (${Bool[${Me.Pet.ID}]}) {
              /bc [+g+] >> Charmed ${Spawn[id ${charmTarget}].CleanName} <<
              /timed 5 /pet back off
              /timed 10 /pet follow
            } else {
              /if (${castReturn.Equal[CAST_IMMUNE]}) {
                /varset doCharm FALSE
                /varset charmTarget 0
                /docommand ${ChatToggle} << ${Spawn[id ${charmTarget}].CleanName} is immune, turning off charm >>
              }
            }
          }
        }
      }
      /if (!${Bool[${Me.Pet.ID}]}) /next s
    } else {
      |accounce time left on charm
      /for s 1 to ${charmArray2D.Size[1]}
      /if (${Bool[${Me.PetBuff[${charmArray2D[${s},${iSpellName}]}]}]}) {
        /varset charmDuration ${Pet.BuffDuration[${charmArray2D[${s},${iSpellName}]}].TotalSeconds}
        |/echo charmduration ${charmDuration} timer ${charmBuffTimer}
        /if (${charmDuration} > 60) {
          /if (!${Bool[${charmBuffTimer}]}) {
            /bc [+g+] My charm fades in ${charmDuration} sec
            /varset charmBuffTimer 18s
          }
        } else /if (${charmDuration} <= 60 && ${charmDuration} > 9) {
          /if (!${Bool[${charmBuffTimer}]}) {
            /bc [+y+] My charm fades in ${charmDuration} sec
            /varset charmBuffTimer 6s
          }
        } else /if (${charmDuration} <= 9) {
          /if (!${Bool[${charmBuffTimer}]}) {
            /bc [+r+] My charm fades in ${charmDuration} sec
            /varset charmBuffTimer 1s
          }
        }
      }
      /next s
    }
  }
}
/if (${Debug} || ${Debug_Ench}) /echo <== check_Charm -|
/return
|--------------------------------------------------------------|
| Mez mobs in ae radius that are not assist target
sub check_bard_mez
  /if (${Debug} || ${Debug_Ench}) /echo |- check_Mez ==>
  /if (${autoMez}) {
    /declare i int local
    /declare s int local
    /declare mezTarg int local
    /if (!${SpawnCount[playerstate 4 npc targetable radius ${AE_Radius}]}) {
      /varset returnTwist TRUE
      /return
    }
    /for i 1 to ${SpawnCount[playerstate 4 npc targetable radius ${AE_Radius}]}
      /varset mezTarg ${NearestSpawn[${i},playerstate 4 npc targetable radius ${AE_Radius}].ID}
      /if (${Spawn[id ${mezTarget}].CleanName.Find[' pet]}) /next i
      /call TrueTarget ${mezTarg}
      /delay 1s ${Target.BuffsPopulated}
      /if (${Select[${AssistTarget},${mezTarg}]}==0 && (!${Bool[${Target.Mezzed}]} || ${Target.Mezzed.Duration.TotalSeconds} < 7)) {
        /for s 1 to ${mezArray2D.Size[1]}
          /if (${check_Distance[${mezTarg},${mezArray2D[${s},${iMyRange}]}]}) {
            /if (${mezArray2D[${s},${iCastType}].Equal[Spell]} && !${Bool[${Me.Gem[${mezArray2D[${s},${iCastName}]}]}]}) /call memorize_spell "${mezArray2D[${s},${iCastName}]}" ${mezArray2D[${s},${iSpellGem}]}
              /docommand ${ChatToggle} << Mezzing ${mezTarg} with ${mezArray2D[${s},${iCastName}]} >>
              /if (${Twist.Twisting}) /call pauseTwist
              /attack off
              |:retryMez
              /twist once ${mezArray2D[${s},${iSpellGem}]}
              /delay 3s 
              /delay 1s ${Target.BuffsPopulated}

              /if (${returnTwist}) /call unpauseTwist
            }
        /if (!${ActionTaken}) /next s
      }
    /if (!${ActionTaken}) /next i
  }
  /if (${Debug}) /echo <== check_Mez -|
/return
|--------------------------------------------------------------|

| Change melodies based on MelodyIf statements
SUB melodyIfs
  | when fixedMelody is stop, stop all melodies and don't let them start
  | when fixedMelody is off/null, start up MelodyIf again
  /if (!${Bool[${fixedMelody.Equal[off]}]} && !${currentMelody.Equal[${fixedMelody}]}) {
    /call EVENT_startMelody "<${Me}> melody ${fixedMelody}" "${Me}" "${fixedMelody}"
    /return
  } else /if (${currentMelody.Equal[${fixedMelody}]}) {
    | already set to one of the fixed melodies
    /return
  }

  /if (!${Defined[melodyIfs]}) /return
  /declare i int local
  /declare newIfMelody string local 
  /for i 1 to ${melodyIfs.Size[1]}
    /varset newIfMelody ${melodyIfs[${i},1]}
    /if (!${currentMelody.Equal[${newIfMelody}]} && (${melodyIfs[${i},2]})) {
      /call EVENT_startMelody "<${Me}> melody ${newIfMelody}" "${Me}" "${newIfMelody}"
    }
  /next i
/RETURN

|--------------------------------------------------------------|

#event setFixedMelody "<#1#> Set Melody #2#"
SUB event_setFixedMelody(line, ChatSender, melodyName)
  | Set to a fixed melody
  /varset fixedMelody ${melodyName}
/RETURN

|--------------------------------------------------------------|

| Automatically cast Selo's Sonata whenever the buff is missing on the Bard
SUB autoSonata
  /if (${autoSonataOn} && (!${Me.Buff[Selo's Sonata].ID} || ${Me.Buff[Selo's Sonata].Duration} < 10000) && !${Me.Invis} && ${Me.AltAbilityReady[Selo's Sonata]}) {
    /alt act 3704
  }
/RETURN

|--------------------------------------------------------------|
Sub BRD_Setup
/if (${Debug}) /echo |- BRD_Setup ==>
/declare autoMez bool outer FALSE
	/call iniToVarV "${Character_Ini},Bard,Auto-Melody" autoMelody string outer
  /call iniToVarV "${Character_Ini},Bard,AutoMez (On/Off)" autoMez bool outer
  /call IniToArrayV "${Character_Ini},Bard,Mez#"	  mezArray
  /call IniToArrayV "${Character_Ini},Bard,Charm#"	charmArray
  /call IniToArrayV "${Character_Ini},Bard,MelodyIf#"	melodyIfArray
  /call iniToVarV "${Character_Ini},Bard,Auto-Sonata (On/Off)" autoSonataOn bool outer
  /call iniToVarV "${Character_Ini},Bard,SongPlayer" songPlayer string outer
  /call iniToVarV "${Character_Ini},Bard,DynamoPrecastTime" dynamoPrecastTime int outer

  /if (!${Defined[songPlayer]}) {
    /echo Setting default SongPlayer to Twist
    /declare songPlayer string outer Twist
  }

  /if (!${Defined[dynamoPrecastTime]}) {
    /declare dynamoPrecastTime int outer 4000
  }

  /declare returnTwist		bool outer FALSE
  /declare playingMelody	bool outer TRUE
  /declare songSet string outer
  /declare resumeTwistDelay timer outer
  /declare songCastTimer timer outer
  /declare currentlyCastingSong string outer none
  /declare currentlyCastingSongNhtTimerName string outer none
  /declare previousCastSong string outer none

  /if (${Defined[mezArray]}) {
    /call BuildSpellArray "mezArray"	"mezArray2D"
  } else {
    /if (${Defined[autoMez]}) /varset autoMez FALSE
  }

  /declare charmTarget int outer
  /if (${Defined[charmArray]}) {
    /call BuildSpellArray "charmArray"	"charmArray2D"
    /declare doCharm bool outer TRUE
    /declare charmBuffTimer timer outer
  } else {
    /declare doCharm bool outer FALSE
  }

  | Setup MelodyIf configuration
  /declare currentMelody string outer ${autoMelody}
  /declare fixedMelody string outer off
  /if (${Defined[melodyIfArray]}) {
    /declare melodyIfs[${melodyIfArray.Size},2] string outer 0
    /declare i int local
    /for i 1 to ${melodyIfArray.Size[1]}
      /varset melodyIfs[${i},1] ${melodyIfArray[${i}].Arg[1,/]}
      /call argueString Ifs| "${melodyIfArray[${i}]}"
      /varset melodyIfs[${i},2] ${Ini[${Character_Ini},Ifs,${c_argueString},NULL,noparse]}
    /next i
  }

  | Clear songs that were playing from previous macro
  /stopsong
  /twist end
/if (${Debug}) /echo <== BRD_Setup -|
/return
|--------------------------------------------------------------|
Sub BRD_Background_Events
  /if (${returnTwist} && !${Bool[${Me.Casting}]} && !${Twist.Twisting} && !${resumeTwistDelay}) /call unpauseTwist
	/doevents saveMelody
	/doevents startMelody
  /doevents charmTarget
  /doevents toggleMez
  /doevents charmOn
  /doevents charmOff
  /doevents setFixedMelody
  /call melodyIfs
  /call autoSonata
  /call check_Dynamo
/return
|--------------------------------------------------------------|
SUB BRD_MacroSettings
	| Adv Settings
	/call WriteToIni "${advSettings_Ini},BRD Functions,BRD Function#1" "check_Burns" 1
	/call WriteToIni "${advSettings_Ini},BRD Functions,BRD Function#2" "check_Buffs" 1
	/call WriteToIni "${advSettings_Ini},BRD Functions,BRD Function#3" "check_bard_mez" 1
/RETURN
|--------------------------------------------------------------|
SUB BRD_CharacterSettings
	/call WriteToIni "${Character_Ini},Bard,Auto-Melody"
  /call WriteToIni "${Character_Ini},Bard,AutoMez (On/Off)" Off
  /call WriteToIni "${Character_Ini},Bard,Mez"
  /call WriteToIni "${Character_Ini},Bard,Charm"
  /call WriteToIni "${Character_Ini},Bard,Auto-Sonata (On/Off)" Off
  /call WriteToIni "${Character_Ini},Bard,MelodyIf"
  /call WriteToIni "${Character_Ini},Bard,SongPlayer" Twist
/RETURN
|--------------------------------------------------------------|
Sub BRD_Aliases
	/squelch /alias /SaveMelody /echo Save Melody
	/squelch /alias /PlayMelody /bc Melody
  /squelch /alias /mezon /bc Mez on
  /squelch /alias /mezoff /bc Mez off
/return

SUB dynamoTwist  
  /if (${songPlayer.NotEqual["Dynamo"]} || ${Me.Invis}) /return

  | Read auto-melody for starting melody
  | If the target is self, read through the list and cast the first one that's not on
  | If the spell type is detrimental, check if I have a target, and if I do go cast that one on the target if it's not on yet
  | may need a "rotate" if you want to skip when it doesn't 
  /if (!${Bool[${Me.Casting}]} && ${Defined[melodyArray]}) {
    /declare spellName string local
    /declare castName string local
    /declare i int local 0
    /declare songIf string local
    /declare ifsPassed bool local TRUE
    /declare tid int local 0
    /declare castTime int local 33

    /for i 1 to ${melodyArray.Size}
      /varset spellName ${melodyArray[${i}].Arg[1,/]}
      /varset castName ${spellName}
      /varset ifsPassed TRUE
      /varset castTime 33
      |/echo ${melodyArray[${i}]}
      /if (${Bool[${melodyArray[${i}].Find[Ifs]}]}) {
        /call argueString Ifs| "${melodyArray[${i}]}"
        /varset songIf ${Ini[${Character_Ini},Ifs,${c_argueString},NULL,noparse]}
        |/echo checking ${spellName} for ${c_argueString}
        /if (!${songIf}) {
          |/echo skipping ${spellName} for ${c_argueString}
          /varset ifsPassed FALSE
        }
      }

      /if (${ifsPassed}) {
        | Handle items
        /if (${FindItemCount[=${spellName}]}) {
          /varset castTime ${Math.Calc[${FindItem[=${spellName}].CastTime}/100 + 3]}
          /varset spellName ${FindItem[=${spellName}].Spell} 
        }

        /if (${Spell[${spellName}].SpellType.Equal[Beneficial]}) {
          /varset tid ${Me.ID}
        } else {
          /varset tid ${Target.ID}
        }

        /if (!${Defined[nhtTimerName]}) {
          /declare nhtTimerName string local song-nht${tid}-${Spell[${spellName}].ID}
        } else {
          /varset nhtTimerName song-nht${tid}-${Spell[${spellName}].ID}
        }

        |/echo nhtTimerName = ${nhtTimerName}

        /if (${Defined[${nhtTimerName}]}) {
          |/echo ${nhtTimerName} Timer defined
          /if (${${nhtTimerName}} > 0) {
            |/echo skipping ${spellName} for timer ${nhtTimerName}, current time: ${${nhtTimerName}}
            /if (${i} < ${melodyArray.Size}) {
              /next i
            } else {
              /return
            }
          }
        }

        /if (${previousCastSong.Equal[${spellName}]}) {
          |/echo Sang ${spellName} previously, skipping to next song
          |/echo previousCastSong = ${previousCastSong}
          /call delaySongCast "${previousCastSong}" "${nhtTimerName}"
          /varset previousCastSong none
          |/echo ${previousCastSong}
          /if (${i} < ${melodyArray.Size}) {
            |/echo going to next i
            /next i
          } else {
            |/echo no more songs, returning
            /return
          }
        }

        |/echo ${Spell[${spellName}].SpellType.Equal[Beneficial]} && (!${Bool[${Me.Song[${spellName}]}]} || ${Me.Song[${spellName}].Duration} < ${dynamoPrecastTime}) && (${castName.NotEqual[${spellName}]} || ${Me.SpellReady[${spellName}]})
        /if (${Spell[${spellName}].SpellType.Equal[Beneficial]} && (!${Bool[${Me.Song[${spellName}]}]} || ${Me.Song[${spellName}].Duration} < ${dynamoPrecastTime}) && (${castName.NotEqual[${spellName}]} || ${Me.SpellReady[${spellName}]})) {
          |/echo Singing ${castName}
          /if (${castName.NotEqual[${spellName}]}) {
            /itemnotify "${castName}" rightmouseup
          } else {
            /cast "${castName}"
          }

          /varset previousCastSong ${spellName}
          |/echo Casting=${Me.Casting.Name}
          /if (${Me.Casting.Name.Equal[${spellName}]} || ${castTime} == 0) {
            /varset currentlyCastingSong ${spellName}
            /varset currentlyCastingSongNhtTimerName ${nhtTimerName}
            /varset songCastTimer ${castTime}

            |/echo ${spellName} songCastTimer = ${songCastTimer}
          }
    
          /return
        } else /if (${Spell[${spellName}].SpellType.Equal[Detrimental]} && ${Bool[${Target.Type.Equal[NPC]}]} && (!${Bool[${Target.Buff[${spellName}]}]} || ${Target.BuffDuration[${spellName}]} < 3300) && (${castName.NotEqual[${spellName}]} || ${Me.SpellReady[${spellName}]}) && ${Target.LineOfSight}) {
          |/echo Singing ${castName}

          /if (${castName.NotEqual[${spellName}]}) {
            /itemnotify "${castName}" rightmouseup
            /delay 5
          } else {
            /cast "${castName}"
          }

          |/echo Casting=${Me.Casting.Name}

          /varset previousCastSong ${spellName}
          /if (${Me.Casting.Name.Equal[${spellName}]} || ${castTime} == 0) {
            /varset currentlyCastingSong ${spellName}
            /varset currentlyCastingSongNhtTimerName ${nhtTimerName}
            /varset songCastTimer ${castTime}

            |/echo ${spellName} songCastTimer = ${songCastTimer}
          }

          /return
        }
      }      
    /if (${i} < ${melodyArray.Size}) /next i
  }
/return

SUB check_Dynamo
  /if (${songPlayer.NotEqual["Dynamo"]} || ${Me.Invis} || !${Defined[melodyArray]}) /return

  | If currently casting and haven't run out of time to cast, skip check
  /if (${Bool[${Me.Casting}]} && ${songCastTimer} > 0) /return

  /if (${Bool[${Me.Casting}]}) {
    |/echo stopping ${Me.Casting}, songCastTimer = ${songCastTimer}
  }

  /stopsong
  
  |/echo currentlyCastingSongNhtTimerName=${currentlyCastingSongNhtTimerName}

  | Check for setting delay timer
  /if (${Spell[${currentlyCastingSong}].SpellType.Equal[Beneficial]}) {
    | If the Beneficial spell does not stick, delay spellcast time and double each time
    /if (!${Bool[${Me.Song[${currentlyCastingSong}]}]}) {
      /call delaySongCast "${currentlyCastingSong}" "${currentlyCastingSongNhtTimerName}"
    } else /if (${Defined[${currentlyCastingSongNhtTimerName}]}) {
      |/echo resetting timer for ${currentlyCastingSong}
      | Song successfually cast, reset the timer to 0
      /varset ${currentlyCastingSongNhtTimerName} 0
    }
  } else {
    | If the Detrimental spell does not stick, delay spellcast time and double each time
    /if (!${Bool[${Target.Buff[${currentlyCastingSong}]}]}) {
      /call delaySongCast "${currentlyCastingSong}" "${currentlyCastingSongNhtTimerName}"
    } else /if (${Defined[${currentlyCastingSongNhtTimerName}]}) {
      | Song successfually cast, reset the timer to 0
      /varset ${currentlyCastingSongNhtTimerName} 0
    }
  }

  /varset currentlyCastingSong none
  /varset currentlyCastingSongNhtTimerName none

  /call dynamoTwist  
/RETURN

SUB delaySongCast(songName, myNhtTimerName)
  /if (${songName.Equal[none]}) {
    /return
  }

  | spell did not take hold, create no hold timer
  /if (!${Defined[${myNhtTimerName}]}) {
    | create a new no hold timer
    |/echo Creating new no hold timer ${myNhtTimerName}
    /declare ${myNhtTimerName} timer outer 30
  } else {
    | Increase the no hold timer from the previous time, up to 1 minute
    /if (${${myNhtTimerName}.OriginalValue} < 600) /varset ${myNhtTimerName} ${Math.Calc[${${myNhtTimerName}.OriginalValue} + 60]}
  }
  |/echo ${songName} did not take hold, waiting ${myNhtTimerName} = ${${myNhtTimerName}.OriginalValue} before trying again
/RETURN